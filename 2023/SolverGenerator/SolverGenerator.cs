using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SolverGenerator
{
	[Generator]
	public class SolverGenerator : ISourceGenerator
	{
		public void Execute(GeneratorExecutionContext context)
		{
			var mainMethod = context.Compilation.GetTypeByMetadataName("AdventOfCode.Solver");

			var source = new StringBuilder();

			source.Append($@"// <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()};

public static partial class {mainMethod.Name} {{
    private static partial IAnswer CreateSolutionInstance(int day) => day switch {{
");

			//
			var classDecls = context.Compilation.SyntaxTrees
				.SelectMany(t => t.GetRoot(context.CancellationToken).DescendantNodes())
				.OfType<ClassDeclarationSyntax>();

			foreach (var classDecl in classDecls)
			{
				var attribute = classDecl.AttributeLists
					.SelectMany(x => x.Attributes)
					.FirstOrDefault(attr => attr.Name.ToString() == "Answer");

				if (attribute == null)
				{
					continue;
				}

				var day = attribute.ArgumentList.Arguments[0].ToString();
				var className = classDecl.Identifier.ToString();

				source.AppendLine($"        {day} => new {className}(),");
			}

			source.AppendLine("        _ => throw new Exception(\"Bad day\")");
			source.AppendLine("    };");

			var data = new string[26];
			var dataExamples = new string[26];

			foreach (var file in context.AdditionalFiles)
			{
				var folder = Path.GetFileName(Path.GetDirectoryName(file.Path));
				var name = Path.GetFileNameWithoutExtension(file.Path);
				var isExample = folder == "DataExamples";

				if (!isExample && folder != "Data")
				{
					continue;
				}

				var text = file
					.GetText(context.CancellationToken)
					.ToString()
					.Replace("\r", "")
					.Replace("\"", "\"\"")
					.TrimEnd();

				if (name == "answers")
				{
					source.AppendLine($"    public static Solution[] Answers{(isExample ? "Example" : "")} = [");
					source.AppendLine($"        new(string.Empty, string.Empty),"); // day 0

					var days = text.Split('\n');

					foreach (var day in days)
					{
						var answers = day.Split(new string[] { " | " }, StringSplitOptions.None);

						source.AppendLine($"        new(\"{answers[0]}\", \"{answers[1]}\"),");
					}

					source.AppendLine("    ];");
				}
				else if (name.StartsWith("day", StringComparison.Ordinal))
				{
					var day = int.Parse(name.Substring(3));

					text = text.Replace("\n", "\\n");

					if (isExample)
					{
						dataExamples[day] = text;
					}
					else
					{
						data[day] = text;
					}
				}
			}

			//
			source.AppendLine("    public static string[] DataExamples = [");
			foreach (var text in dataExamples)
			{
				source.AppendLine($"        \"{text ?? string.Empty}\",");
			}
			source.AppendLine("    ];");

			//
			source.AppendLine("    public static string[] Data = [");
			foreach (var text in data)
			{
				source.AppendLine($"        \"{text ?? string.Empty}\",");
			}
			source.AppendLine("    ];");

			//
			source.AppendLine("}");

			context.AddSource($"{mainMethod.Name}.g.cs", source.ToString());
		}

		public void Initialize(GeneratorInitializationContext context)
		{
		}
	}
}
